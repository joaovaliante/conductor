<policies>
    <inbound>
        <base />
        <set-variable name="requestIpAddress" value="@{
            string ipAddress = context.Request.IpAddress;
            if (!String.IsNullOrEmpty(context.Request.Headers.GetValueOrDefault("x-forwarded-for",""))) {
                ipAddress = context.Request.Headers.GetValueOrDefault("x-forwarded-for","");
                string[] tokens = ipAddress.Split(':'); 
                if (tokens.Length == 2) {
                    ipAddress = tokens[0];
                }                                    
            }
            return ipAddress;
        }" />
        <set-variable name="requestBody" value="@{
            if (context.Request?.Body?.As<string>(true) != null) {
                return context.Request.Body.As<string>(true);
            }
            return new JObject().ToString();
        }" />
        <!-- CHECK IF BODY IS VALID  -->
        <set-variable name="BodyIsEmpty" value="@{
            if (context.Request.Body == null) {
              return true;
            }
            return false;
        }" />
        <set-variable name="BodyIsValid" value="@{   
            if (context.Request.Body == null) {
              return false;
            }

            try {
              JToken.Parse(context.Request.Body.As<String>(preserveContent: true));
              return true;
            } catch (JsonReaderException ex) {
              return false;
            }
        }" />
        <choose>
            <!-- IF BODY IS EMPTY RETURN BAD REQUEST -->
            <when condition="@((bool)context.Variables["BodyIsEmpty"])">
                <set-variable name="responseCode" value="400" />
                <set-variable name="responseReason" value="Bad Request" />
                <set-variable name="responseBody" value="body cannot be empty" />
            </when>
            <!-- IF BODY NOT IS VALID JSON RETURN BAD REQUEST -->
            <when condition="@(!(bool)context.Variables["BodyIsValid"])">
                <set-variable name="responseCode" value="400" />
                <set-variable name="responseReason" value="Bad Request" />
                <set-variable name="responseBody" value="json not valid" />
            </when>
            <!-- ELSE SET VARIABLES  -->
            <otherwise>
                <set-variable name="body" value="@(context.Request.Body.As<JObject>())" />
                <set-variable name="client" value="@{
                    if (String.IsNullOrEmpty((string)((JObject)context.Variables["body"])["clientId"])) {
                      return false;
                    }
                    return true;
                }" />
                <set-variable name="appName" value="@{
                    if (String.IsNullOrEmpty((string)((JObject)context.Variables["body"])["appName"])) {
                      return false;
                    }
                    return true;
                }" />
                <set-variable name="duration" value="@{
                    string _duration = (string)((JObject)context.Variables["body"])["duration"];
                    if (string.IsNullOrEmpty(_duration)){
                        _duration = "{{duration}}";
                    }
                    return _duration;
                }" />
                <set-variable name="ip-filter" value="@{
                    try {
                        if (((JObject)context.Variables["body"]).TryGetValue("ip-filter", out JToken ipFilter)) {
                            if (!String.IsNullOrEmpty(ipFilter.ToString())) {
                                if (!String.IsNullOrEmpty((string)ipFilter["mode"]) && (ipFilter["mode"].ToString().ToLower() == "allow" || (string)ipFilter["mode"].ToString().ToLower() == "deny")) {
                                    if (((JObject)ipFilter).TryGetValue("ips", out JToken ips)){
                                        JArray _ips = JArray.Parse(ips.ToString());
                                        foreach (JToken ip in _ips) {
                                            if(!Regex.IsMatch((string)ip, @"^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$")){
                                                return false;
                                            }
                                        }
                                        return true;
                                    }
                                    return false;
                                }
                                return false;
                            }
                            return true;
                        }
                        return true;
                    } catch(JsonException e) {
                        return false;
                    }
                }" />
                <set-variable name="token" value="@{
                    try {
                        if (((JObject)context.Variables["body"]).TryGetValue("tokens", out JToken tokens)) {
                            JArray _tokens = JArray.Parse(tokens.ToString());
                            if (_tokens.Count <= 0){
                                return false;
                            }

                            foreach (var token in _tokens) {
                                if (String.IsNullOrEmpty((string)token)) {
                                    return false;
                                }
                            }
                            return true;
                        }
                    } catch(JsonException e) {
                        return false;
                    }
                    return false;
                }" />
                <!-- CHECK IF BODY KEY ARE VALID -->
                <choose>
                    <!-- IF IS NULL OR EMPTY RETURN BAD REQUEST AND A VALID BODY -->
                    <when condition="@(!(bool)context.Variables["client"] || !(bool)context.Variables["appName"] || !(bool)context.Variables["ip-filter"] || !(bool)context.Variables["token"])">
                        <set-variable name="responseCode" value="400" />
                        <set-variable name="responseReason" value="Bad Request" />
                        <set-variable name="responseBody" value="invalid json keys." />
                    </when>
                    <!-- ELSE CHECK IF EXIST ON CACHE -->
                    <otherwise>
                        <set-variable name="clientId" value="@((string)((JObject)context.Variables["body"])["clientId"])" />
                        <!-- GET VALUE ON CACHE -->
                        <cache-lookup-value key="@((string)context.Variables["clientId"])" variable-name="clientCache" caching-type="internal" />
                        <choose>
                            <!-- CHECK IF VALUE NOT EXIST ON INTERNAL CACHE -->
                            <when condition="@(!(bool)context.Variables.ContainsKey("clientCache"))">
                                <!-- CHECK IF VALUE EXIST ON EXTERNAL CACHE -->
                                <cache-lookup-value key="@((string)context.Variables["clientId"])" variable-name="clientCache" caching-type="external" />
                                <choose>
                                    <!-- CREATE IF NOT EXIST -->
                                    <when condition="@(!(bool)context.Variables.ContainsKey("clientCache"))">
                                        <cache-store-value key="@((string)context.Variables["clientId"])" value="@(((JObject)context.Variables["body"]).ToString())" duration="@(int.Parse((string)context.Variables["duration"]))" caching-type="internal" />
                                        <cache-store-value key="@((string)context.Variables["clientId"])" value="@(((JObject)context.Variables["body"]).ToString())" duration="@(int.Parse((string)context.Variables["duration"]))" caching-type="external" />

                                        <set-variable name="responseCode" value="201" />
                                        <set-variable name="responseReason" value="Created" />
                                        <set-variable name="responseBody" value="" />
                                    </when>
                                </choose>
                            </when>
                        </choose>
                        <!-- UPDATE VALUE -->
                        <cache-store-value key="@((string)context.Variables["clientId"])" value="@(((JObject)context.Variables["body"]).ToString())" duration="@(int.Parse((string)context.Variables["duration"]))" caching-type="internal" />
                        <cache-store-value key="@((string)context.Variables["clientId"])" value="@(((JObject)context.Variables["body"]).ToString())" duration="@(int.Parse((string)context.Variables["duration"]))" caching-type="external" />
                        <set-variable name="responseCode" value="200" />
                        <set-variable name="responseReason" value="Ok" />
                        <set-variable name="responseBody" value="" />
                    </otherwise>
                </choose>
            </otherwise>
        </choose>        
        <log-to-eventhub logger-id="logger-eventhub-cache">@{
            var clientId = context.Variables.GetValueOrDefault<string>("clientId", "");
            clientId = Regex.Replace(clientId, "^.{1,3}", "*");
            clientId = Regex.Replace(clientId, ".{1,3}$", "*");

            var headers = new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase);
            foreach (var entry in context.Request.Headers) {
                var value = entry.Value != null ? String.Join(",", (string[])entry.Value) : null;
                headers.Add(entry.Key, value);
            }

            foreach (var key in new string[] { "subscription_key" }) {
                if (headers.ContainsKey(key)) {
                    headers[key] = Regex.Replace(headers[key], "^.{1,3}", "*");
                    headers[key] = Regex.Replace(headers[key], ".{1,3}$", "*");
                }
            }

            var content = new Dictionary<string, object>() {
                {"errorGateway", false}, 
                {"apimRegion", context.Deployment.Region},
                {"apimName", context.Deployment.ServiceName},
                {"requestId", context.RequestId}, 
                {"requestOperationId", context.Operation.Id},
                {"requestOperationTemplate", context.Operation.UrlTemplate},
                {"requestMethod", context.Request.Method}, 
                {"requestHeaders", headers}, 
                {"requestMatchedParameters", context.Request.MatchedParameters}, 
                {"requestOriginalUrl", context.Request.OriginalUrl.ToString()}, 
                {"requestUrl", context.Request.Url.ToString()}, 
                {"requestIpAddress", context.Variables.GetValueOrDefault<string>("requestIpAddress")},
                {"requestHasClient", context.Variables.GetValueOrDefault<Boolean>("client")}, 
                {"requestHasAppName", context.Variables.GetValueOrDefault<Boolean>("appName")}, 
                {"requestHasIpFilter", context.Variables.GetValueOrDefault<Boolean>("ip-filter")}, 
                {"requestClientId", clientId}, 
                {"responseCode", int.Parse(context.Variables.GetValueOrDefault<string>("responseCode"))}, 
                {"responseReason", context.Variables.GetValueOrDefault<string>("responseReason")}
            };

            if ("{{log-level}}" == "DEBUG") {
                content.Add("requestBody", context.Variables.GetValueOrDefault<string>("requestBody"));
            }
            return JsonConvert.SerializeObject(content);
        }</log-to-eventhub>            
        <return-response>
            <set-status code="@(int.Parse(context.Variables.GetValueOrDefault<string>("responseCode")))" reason="@(context.Variables.GetValueOrDefault<string>("responseReason"))" />
            <set-body>@(context.Variables.GetValueOrDefault<string>("responseBody"))</set-body>
        </return-response>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <log-to-eventhub logger-id="logger-eventhub-cache">@{
            var clientId = context.Variables.GetValueOrDefault<string>("clientId", "");
            clientId = Regex.Replace(clientId, "^.{1,3}", "*");
            clientId = Regex.Replace(clientId, ".{1,3}$", "*");

            var headers = new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase);
            foreach (var entry in context.Request.Headers) {
                var value = entry.Value != null ? String.Join(",", (string[])entry.Value) : null;
                headers.Add(entry.Key, value);
            }

            foreach (var key in new string[] { "subscription_key" }) {
                if (headers.ContainsKey(key)) {
                    headers[key] = Regex.Replace(headers[key], "^.{1,3}", "*");
                    headers[key] = Regex.Replace(headers[key], ".{1,3}$", "*");
                }
            }            

            var content = new Dictionary<string, object>() {
                {"errorGateway", true}, 
                {"apimRegion", context.Deployment.Region},
                {"apimName", context.Deployment.ServiceName},
                {"requestId", context.RequestId}, 
                {"requestOperationId", context.Operation.Id},
                {"requestOperationTemplate", context.Operation.UrlTemplate},
                {"requestMethod", context.Request.Method}, 
                {"requestHeaders", headers}, 
                {"requestMatchedParameters", context.Request.MatchedParameters}, 
                {"requestOriginalUrl", context.Request.OriginalUrl.ToString()}, 
                {"requestUrl", context.Request.Url.ToString()}, 
                {"requestIpAddress", context.Variables.GetValueOrDefault<string>("requestIpAddress")},
                {"requestHasClient", context.Variables.GetValueOrDefault<Boolean>("client")}, 
                {"requestHasAppName", context.Variables.GetValueOrDefault<Boolean>("appName")}, 
                {"requestHasIpFilter", context.Variables.GetValueOrDefault<Boolean>("ip-filter")}, 
                {"requestClientId", clientId}, 
                {"responseCode", context.Response.StatusCode}, 
                {"responseReason", context.Response.StatusReason}, 
                {"errorReason", context.LastError.Reason}, 
                {"errorMessage", context.LastError.Message}
            };

            if ("{{log-level}}" == "DEBUG") {
                content.Add("requestBody", context.Variables.GetValueOrDefault<string>("requestBody"));
            }
            return JsonConvert.SerializeObject(content);
        }</log-to-eventhub>            
        <base />
    </on-error>
</policies>